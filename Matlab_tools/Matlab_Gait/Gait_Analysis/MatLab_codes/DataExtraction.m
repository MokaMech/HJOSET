% =====================================================================
% =====================================================================
% =====================================================================
%
%% CODE WRITTEN FOR DATA EXTRACTION FROM EXPERIMENT
%  DONE WITH "DELP MULTIPLE SPEEDS EXP" DATASET
%  Could also work with your own results if adapted
% =====================================================================
% =====================================================================
% =====================================================================



%% =====================================================================
%            Settings ==> to update depending your dataset

clc
clear

% Folders
% Select the root folder that contains all participants folders.
% E.g. C:\\Root\[GIL1 GIL2 GIL3 ...]
res_folder_root = uigetdir('*', 'Select the root folder that contains the datasets');
part_prefix = 'GIL';
%Counts down how many participants are listed
res_folder = dir(res_folder_root);
j=1;
for i = 1 : size(res_folder,1)
    if res_folder(i).isdir && contains(res_folder(i).name,part_prefix)
    part_folders(j,1) = string(res_folder(i).name);
    j = j+1;
    end
end

% Allows the algo the batch process the root folder or select only on
% participant and one or several speeds

% Nbr of participants to process
max_part = 1 ;
%max_part = size(part_folders,1);

% Nbr of speeds to process
iter_per_part = 1;

toeOffEvents = zeros(max_part,iter_per_part,3);
swing = zeros(max_part,iter_per_part);
swing =  [['L' 'L' 'L' 'R'];
         ['L' 'R' 'R' 'L'];
         ['R' 'R' 'L' 'R'];
         ['L' 'L' 'L' 'L'];
         ['L' 'L' 'L' 'L'];
         ['L' 'L' 'L' 'R'];
         ['L' 'R' 'L' 'R']];

% Reported Toe-Off events on Swing leg.
toeoff = zeros(max_part,iter_per_part);
toeoff = [[1.06 1.07 0.74 0.59];
          [1.01 0.96 0.62 0.40];
          [1.28 0.74 0.67 0.61]
          [1.33 0.84 0.67 0.60];
          [1.11 0.98 0.72 0.59];
          [1.11 0.96 0.66 0.54]
          [1.19 1.03 0.55 0.48]];

% Reported Speeds are dimension-less.    
speeds = zeros(max_part,iter_per_part);
speeds = [[0.21 0.24 0.37 0.51];
         [0.19 0.24 0.45 0.70];
         [0.19 0.35 0.44 0.50];
         [0.18 0.29 0.39 0.50]
         [0.19 0.23 0.37 0.53];
         [0.21 0.28 0.41 0.57];
         [0.22 0.24 0.45 0.60]];

%% =====================================================================
     
for part = 1: max_part
    for it = 1 : iter_per_part
%% Data Importation
    % Importing Ankle Kinematics Data
    % kinData output format : Time(s) | r_ankle_angle | l_ankle_angle
    %
    [res,path] = uigetfile('*',strcat(part_folders(part),':',"spd",num2str(it)," : Select a .sto states_degree file to import"));
    kinData = extractLRAnklesKinematicsMat([path,res],13);
    
    % Importing Ankle Moments Data ( generated by Opensim after CMC in Plot > 
    % Moments > Tq=f(TA+SOL+GAS,theta), or reserve joint torques given by RRA results)
    % momData output format : Time(s) | ankle_mom_r(unit to confirm) | ankle_mom_l(unit to confirm)
    %
    [res,path] = uigetfile('*',strcat(part_folders(part),':',"spd",num2str(it),"Select a .sto torque file to import"));
    momData = importAnkleMomFromGILMom([path,res],8);
%    end
%end
%% Matching time series for both kin and force sets
    
    if size(kinData,1) > size(momData,1)
        % Higher range
        momData = interp1(table2array(momData(:,1)),table2array(momData(:,1:3)),kinData(:,1));
    else
        %Smaller range
        kinData = interp1(kinData(:,1),kinData(:,1:3),momData(:,1));
    end
    
%% Gait Event Stamping
    % spotting the 'Toe-off' event on the swing leg for later reajustment
    % purpose.
    % toeOffEvents : time | corresponding ankle angle | corresponding ankle
    % moment(after time reajustement)
    
    % Searching for the closest point from reported 'toe-off' time value
    n=toeoff(part,it);
    [val,idx]=min(abs(kinData(:,1)-n));
    
    if swing(part,it) == 'R'
        toeOffEvents(part,it,1) = kinData(idx(1),1); %time
        toeOffEvents(part,it,2) = kinData(idx(1),2);
        toeOffEvents(part,it,3) = momData(idx(1),2);
    else
        toeOffEvents(part,it,1) = kinData(idx(1),1); %time
        toeOffEvents(part,it,2) = kinData(idx(1),3);
        toeOffEvents(part,it,3) = momData(idx(1),3);
    end
    
 %% overviewing legs data
    fig1=figure();
    title ("Select R/L leg for this trial")
    xlabel("Ankle deviation (deg)");
    ylabel("Torque (Nm/kg)");
    % Plotting Ankle Dev and Torque over Time
    plot3(kinData(:,1),kinData(:,2),momData(:,2),kinData(:,1),kinData(:,3),momData(:,3));
    view([1,0,0]);
    hold on
    plot3(0,toeOffEvents(part,it,2),toeOffEvents(part,it,3),'o',...
                      'MarkerFaceColor','g','MarkerSize',5);
    hold on;
    legend("Right Leg","Left Leg",strcat(swing(part,it)," leg toe-off"));
    hold on;
    
    disp("Would you like to keep 1 leg or merge 2 ?");
    res = input("choices : 'k' to keep or 'm' to merge ","s");
    
    switch res
        % Keep kinData and momData as [Time Selected_leg_data]
        case 'k'
            side = input("choose a side to keep : 'r' or 'l'","s");
            close(fig1);
    
            if side == 'R' || side == 'r'
                disp("right side selected");
                kinData_filt = [kinData(:,1) kinData(:,2)];
                momData_filt = [momData(:,1) (momData(:,2))];
            else
                disp("left side selected");
                kinData_filt = [kinData(:,1) kinData(:,3)];
                momData_filt = [momData(:,1) momData(:,3)];
            end
        %break;
           
        case 'm'
        % Keep eachy leg data as [Time 1leg_kinData 1leg_momData]
            rightLeg = [kinData(:,2) momData(:,2)];
            leftLeg =  [kinData(:,3) momData(:,3)];
            P = InterX([rightLeg',leftLeg']); % P is the intersection of curves 
            plot3(zeros(1,size(P,2)),P(1,:),P(2,:),'ro');
            disp("showing intersection points")
            
            % ========== Manual editing ===========
            
            res2 = "";
            disp(" ===== Entering manual editing ===== ");
            disp(" ===> Clear undesired data");
            disp(" ===> once done, save the 2 cleaned sets in 'rLeg_filt'"); 
            disp("      and 'lLeg_filt' variables by brushing the set then save in variable");
            while ~(strcmp(res2,"OK"))  
                res2 = input(" ===> Please enter 'OK' when done with editing : ","s");
            end

            % ========== Manual editing ===========
         
            % Data Merging
            
            kinData_filt(:,1) = [rLeg_filt(:,1);lLeg_filt(:,1)];
            kinData_filt(:,2) = [rLeg_filt(:,2);lLeg_filt(:,2)];

            momData_filt(:,1) = kinData_filt(:,1);
            momData_filt(:,2) = [rLeg_filt(:,3);lLeg_filt(:,3)];
            
            close(fig1);
            fig2 = figure();
            plot3(kinData_filt(:,1),kinData_filt(:,2),momData_filt(:,2));
         %break;
    end

%% Data Reajustment
% Apply an X_toeOff and Y_toeOff offset on data to put the "Toe-off" point
% to the origin.

%kinData(:,2) = kinData(:,2) - toeOffEvents(part,it,2);
%momData(:,2) = momData(:,2) - toeOffEvents(part,it,3);
    
%% Computation on Data
%   Nmm/kg ==> Nm/kg
    momData_filt(:,2) = momData_filt(:,2) * 0.001; 
    
%% Storage
%Adding subject walking speed of the current trial
%stiffData = [ t : Time | x : Ankle Ang | y : Ankle Torque | z : Walking Speed ]
stiffData{part,it} = [kinData_filt(:,1) kinData_filt(:,2) momData_filt(:,2) ones(size(kinData_filt,1),1)*speeds(part,it)];
res3 = input(strcat("Would you like to export stiffness matrix ? y/n "),"s");
if res3 == "n"
else
    % Save the stiffness vector
end
    end
end

%% Plotting
for part = 1 : max_part
    figure();
    plot3(stiffData{part,1}(:,2),stiffData{part,1}(:,3),stiffData{part,1}(:,4),'b');
    hold on;
    plot3(stiffData{part,2}(:,2),stiffData{part,2}(:,3),stiffData{part,2}(:,4),'g');
    hold on;
    plot3(stiffData{part,3}(:,2),stiffData{part,3}(:,3),stiffData{part,3}(:,4),'m');
    hold on;
    plot3(stiffData{part,4}(:,2),stiffData{part,4}(:,3),stiffData{part,4}(:,4),'r');
    for it = 1 : iter_per_part        
        legends(part,it) = strcat("Subject #",num2str(part),"Speed #",num2str(it)); 
    end
    title('Ankle Muscles Torque Generation');
xlabel("Ankle deviation (deg)");
ylabel("Speeds (none)");
zlabel("Torque (Nm/kg)");
legend(legends(part,:));
    %hold on;
end


%% Plotting surface
% searching for the smallest data range to fit others upon it.
min_range = 10000;
for i = 1 : iter_per_part
    res_min = size(stiffData{6,i},1);
    if res_min < min_range
        min_range = res_min;
        min_range_serie = i;
    end
end
% fitting datasets
for i = 1:iter_per_part
    stiffData_surf{i} = interp1(stiffData{1,i}(:,1),stiffData{1,i}(:,1:3),stiffData{1,min_range_serie}(:,1));
end
stiffDataSurfMat = cell2mat(stiffData_surf);
mesh(stiffDataSurfMat(:,1),stiffDataSurfMat(:,2),stiffDataSurfMat(:,3));